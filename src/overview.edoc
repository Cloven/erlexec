
        Exec - OS Process Manager for Erlang VM.

@author Serge Aleynikov <saleyn@gmail.com>
@version {@vsn}
@title Exec - OS Process Manager for Erlang VM.

@doc This application implements a manager of OS processes.

<h3><a name="contents">Contents</a></h3>
<ol>
  <li><a href="#fs">Features</a></li>
  <li><a href="#sp">Supported Platforms</a></li>
  <li><a href="#ar">Architecture</a></li>
  <li><a href="#sc">Configuration Options</a></li>
  <li><a href="#ex">Examples</a></li>
</ol>


<h3><a name="fs">Features</a></h3>

<ul>
<li>Starting, stopping OS commands and getting their OS process IDs.</li>
<li>Providing versatile OS command options, including working directory,
    environment settings, alternative termination command, effective
    user, process priority options, custom redirection of their
    stdout and stderr output.</li>
<li>Ability to link Erlang processes to OS processes (via intermediate
    Erlang Pids that are linked to an associated OS process).</li>
<li>Proper cleanup of OS processes at port program termination time.</li>
<li>Redirecting STDOUT and STDERR of a process to a file, erlang process,
    or a custom function</li>
</ul>
<p/>

<h3><a name="sp">Supported Platforms</a></h3>

Currently the project supports Linux and Solaris operating systems.

<h3><a name="ar">Architecture</a></h3>
```
  *-------------------------*
  |   +----+ +----+ +----+  |
  |   |Pid1| |Pid2| |PidN|  |   Erlang light-weight Pids associated
  |   +----+ +----+ +----+  |   one-to-one with managed OsPids
  |         \   |   /       |
  |          \  |  /        |
  |           \ | / (links) |
  |         +------+        |
  |         | exec |        |   Exec application running in Erlang VM
  |         +------+        |
   Erlang VM    |           |
  *-------------+-----------*
                |
          +-----------+
          | exec-port |         Port program (separate OS process)
          +-----------+
           /    |    \
          /     |     \
    +------+ +------+ +------+
    |OsPid1| |OsPid2| |OsPidN|  Managed Child OS processes
    +------+ +------+ +------+
'''

<h3><a name="sc">Configuration Options</a></h3>

See description of types in {@link exec:exec_options()}.

<h3><a name="ex">Examples</a></h3>

<h4>Starting/stopping a OS process</h4>
```
1> exec:start([]).                                      % Start the port program.
{ok,<0.32.0>}
2> {ok, _, I} = exec:run_link("sleep 1000", []).        % Run a shell command to sleep for 1000s.
{ok,<0.34.0>,23584}
3> exec:stop(I).                                        % Kill the shell command.
ok                                                      % Note that this could also be accomplished
                                                        % by doing exec:stop(pid(0,34,0)).
'''

<h4>Killing an OS process</h4>

Note that killing a process can be accomplished by running kill(3) command
in an external shell, or by executing exec:kill/2.
```
4> f(I), {ok, _, I} = exec:run_link("sleep 1000", []).
{ok,<0.37.0>,2350}
5> exec:kill(I, 15).
ok
** exception error: {exit_status,15}                    % Our shell died because we linked to the
                                                        % killed shell process via exec:run_link/2.

6> exec:status(15).                                     % Examine the exit status.
{signal,15,false}                                       % The program got SIGTERM signal and produced
                                                        % no core file.
'''

<h4>Redirecting OS process stdout to a file</h4>
```
7> f(I), {ok, _, I} = exec:run_link("for i in 1 2 3; do echo \"Test$i\"; done",
    [{stdout, "/tmp/output"}]).
8> io:format("~s", [binary_to_list(element(2, file:read_file("/tmp/output")))]).
Test1
Test2
Test3
ok
9> file:delete("/tmp/output").
'''

<h4>Redirecting OS process stdout to an Erlang process or a custom function</h4>
```
10> exec:run("for i in 1 2 3; do sleep 1; echo \"Iter$i\"; done",
            [{stdout, fun(S,OsPid,D) -> io:format("Got ~w from ~w: ~p\n", [S,OsPid,D]) end}]).
{ok,<0.242.0>,18378}
Got stdout from 18378: <<"Iter1\nIter2\nIter3\n">>

11> exec:run("echo Hello World!; echo ERR!! 1>&2", [{stdout, self()}, {stderr, self()}]).
{ok,<0.244.0>,18382}
12> flush().
Shell got {stdout,18382,<<"Hello World!\n">>}
Shell got {stderr,18382,<<"ERR!!\n">>}
ok
'''

<h4>Appending OS process stdout to a file</h4>
```
13> f(I), {ok, _, I} = exec:run_link("for i in 1 2 3; do echo \"$RANDOM\"; done",
    [{stdout, {append, "/tmp/random"}]).
14> io:format("~s", [binary_to_list(element(2, file:read_file("/tmp/random")))]).
6093
17318
23135
ok
15> file:delete("/tmp/random").
'''

<h4>Setting up a monitor for the OS process</h4>
```
> f(I), f(P), {ok, P, I} = exec:run("echo ok", [{stdout, self()}, monitor]).
{ok,<0.263.0>,18950}
16> flush().                                                                  
Shell got {stdout,18950,<<"ok\n">>}
Shell got {'DOWN',#Ref<0.0.0.1651>,process,<0.263.0>,normal}
ok
'''

<h4>Managing an externally started OS process</h4>
This command allows to instruct erlexec to begin monitoring given OS process
and notify Erlang when the process exits. It is also able to send signals to
the process and kill it.
```
% Start an externally managed OS process and retrieve its OS PID:
17> spawn(fun() -> os:cmd("echo $$ > /tmp/pid; sleep 15") end).
<0.330.0>  
18> f(P), P = list_to_integer(lists:reverse(tl(lists:reverse(binary_to_list(element(2,
file:read_file("/tmp/pid"))))))).
19355

% Manage the process and get notified by a monitor when it exits:
19> exec:manage(P, [monitor]).
{ok,<0.334.0>,19355}

% Wait for monitor notification
20> f(M), receive M -> M end.
{'DOWN',#Ref<0.0.0.2205>,process,<0.334.0>,{exit_status,10}}
ok
21> file:delete("/tmp/pid").
ok
'''
@end
